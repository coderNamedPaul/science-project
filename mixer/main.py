# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'music.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtMultimedia import *
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QIcon
import os


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(50, 30, 100, 25))
        self.pushButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(250, 20, 321, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 100, 450, 450))
        self.label.setObjectName("label")
        self.verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider.setGeometry(QtCore.QRect(735, 80, 51, 211))
        self.verticalSlider.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.verticalSlider.setMinimum(1)
        self.verticalSlider.setMaximum(300)
        self.verticalSlider.setProperty("value", 25)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(590, 10, 199, 58))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 0, 1, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 1, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 1, 1, 1, 1)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(518, 120, 181, 101))
        self.pushButton_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_2.setGeometry(QtCore.QRect(520, 460, 101, 61))
        self.lcdNumber_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.lcdNumber_3 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_3.setGeometry(QtCore.QRect(640, 460, 101, 61))
        self.lcdNumber_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.lcdNumber_3.setObjectName("lcdNumber_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.app()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "mixer"))
        MainWindow.setWindowIcon(QIcon('web.png')) 
        self.pushButton.setText(_translate("MainWindow", "выбор папки"))
        self.label_2.setText(_translate("MainWindow", ""))
        self.label.setText(_translate("MainWindow", ""))
        self.pushButton_2.setText(_translate("MainWindow", "пауза"))
        self.pushButton_5.setText(_translate("MainWindow", "пуск"))
        self.pushButton_3.setText(_translate("MainWindow", "предыдущая"))
        self.pushButton_4.setText(_translate("MainWindow", "следующая"))
        self.pushButton_6.setText(_translate("MainWindow", "продолжить"))




    def app(self):
        self.player = QMediaPlayer()
        self.pushButton.clicked.connect(self.FileOpen)
        self.pushButton_5.clicked.connect(self.play)
        self.pushButton_3.clicked.connect(self.back)
        self.pushButton_4.clicked.connect(self.forward)
        self.pushButton_2.clicked.connect(self.stop)
        self.pushButton_6.clicked.connect(self.sPlay)
        self.player.durationChanged.connect(lambda: self.setTimer(self.player.duration()))
        self.verticalSlider.valueChanged.connect(self.vS)

    def FileOpen(self):
        self.qfile = QtWidgets.QFileDialog
        self.directory = self.qfile.getExistingDirectory()
        self.files = []
        for i in os.listdir(self.directory):
            if i.endswith('.mp3'):
                self.files.append(i)
        if os.path.isdir(self.directory + '/Scans'):
            print(0)
            if os.path.isfile(self.directory + '/Scans/Front.jpg'):
                self.image = self.directory + '/Scans/Front.jpg'
            elif os.path.isfile(self.directory + '/Scans/Front.jpeg'):
                self.image = self.directory + '/Scans/Front.jpeg'
        elif os.path.isfile(self.directory + '/Front.jpeg'):
            print(1)
            self.image = self.directory + '/Front.jpeg'
        elif os.path.isfile(self.directory + '/Folder.jpeg'):
            print(2)
            self.image = self.directory + '/Folder.jpeg'
        elif os.path.isfile(self.directory + '/Folder.jpg'):
            print(2)
            self.image = self.directory + '/Folder.jpg'
        else:
            self.image = '1.png'
            print('нет картинки')
        self.pix = QtGui.QPixmap(self.image)
        self.pixScaled=self.pix.scaled(450, 450, transformMode=QtCore.Qt.SmoothTransformation)
        self.label.setPixmap(self.pixScaled)
        self.curentSong = self.files[0]

    def play(self):
        self.label_2.setText(self.curentSong)
        print(self.directory + '/' + self.curentSong)
        song = self.directory + '/' + self.curentSong
        self.player.setMedia(QMediaContent(QUrl.fromLocalFile(song)))
        self.player.play()
        self.timer = QTimer()
        self.timer.timeout.connect(self.forward)
        self.lcdNumber_2.display(self.player.duration() // 1000)

    def back(self):
        if self.files.index(self.curentSong) >= 0:
            self.curentSong = self.files[self.files.index(self.curentSong)-1]
            self.play()

    def forward(self):
        if self.files.index(self.curentSong) <= len(self.files)-1:
            self.curentSong = self.files[self.files.index(self.curentSong)+1]
            self.play()

    def stop(self):
        self.player.pause()
        self.timer2.stop()

    def setTimer(self, value):
        self.timer2 = QTimer()
        self.timer2.timeout.connect(self.change)
        self.timer2.start(1000)
        self.lcdNumber_2.display(value//1000//60)
        self.lcdNumber_3.display(value // 1000 % 60)
        self.timer.start(value)

    def sPlay(self):
        self.player.play()
        self.timer2.start()

    def vS(self):
        self.player.setVolume(self.verticalSlider.value())

    def change(self):
        SDV = self.lcdNumber_3.value()
        MDV = self.lcdNumber_2.value()
        SD = self.lcdNumber_3
        MD = self.lcdNumber_2
        if MDV > 0 and SDV == 0:
            MD.display(MDV - 1)
            SD.display(59)

        elif SDV > 0:
            SD.display(SDV - 1)
        else:
            self.timer2.stop()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
